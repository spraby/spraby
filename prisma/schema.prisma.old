datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  manager
  customer
}

enum OrderStatus {
  pending
  confirmed
  processing
  completed
  cancelled
  archived
}

enum DeliveryStatus {
  pending
  packing
  shipped
  transit
  delivered
}

enum FinancialStatus {
  unpaid
  paid
  partial_paid
  refunded
}

enum BrandSettingsType {
  delivery
  refund
  phones
  emails
  socials
  addresses
}

model User {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  email     String   @unique
  role      UserRole @default(manager)
  password  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Brands    Brand[]
}

model Brand {
  id          String          @id @default(cuid())
  userId      String?
  name        String
  description String?
  updatedAt   DateTime        @updatedAt
  createdAt   DateTime        @default(now())
  User        User?           @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Products    Product[]
  Categories  Category[]
  Images      Image[]
  Settings    BrandSettings[]
  Orders      Order[]
}

model Option {
  id            String         @id @default(cuid())
  name          String
  title         String
  description   String?
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  Values        OptionValue[]
  Categories    Category[]
  VariantValues VariantValue[]
}

model OptionValue {
  id            String         @id @default(cuid())
  optionId      String
  value         String
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  Option        Option         @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  VariantValues VariantValue[]
}

model Category {
  id          String       @id @default(cuid())
  handle      String       @unique
  name        String
  title       String
  description String?
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  Options     Option[]
  Collections Collection[]
  Brands      Brand[]
  Products    Product[]
}

model Collection {
  id          String     @id @default(cuid())
  handle      String     @unique
  name        String
  title       String
  description String?
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  Categories  Category[]
}

model Product {
  id          String         @id @default(cuid())
  brandId     String
  categoryId  String?
  title       String
  description String?
  enabled     Boolean        @default(true)
  price       Decimal        @default(0) @db.Decimal(10, 2)
  finalPrice  Decimal        @default(0) @db.Decimal(10, 2)
  updatedAt   DateTime       @updatedAt
  createdAt   DateTime       @default(now())
  Brand       Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category    Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Variants    Variant[]
  Images      ProductImage[]
  OrderItems  OrderItem[]
}

model Variant {
  id         String         @id @default(cuid())
  productId  String
  imageId    String?
  title      String?
  price      Decimal        @default(0) @db.Decimal(10, 2)
  finalPrice Decimal        @default(0) @db.Decimal(10, 2)
  updatedAt  DateTime       @updatedAt
  createdAt  DateTime       @default(now())
  Product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image      ProductImage?  @relation(fields: [imageId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Values     VariantValue[]
  OrderItems OrderItem[]
}

model VariantValue {
  id            String      @id @default(cuid())
  variantId     String
  optionId      String
  optionValueId String
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  Variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Option        Option      @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value         OptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variantId, optionId])
  @@unique([variantId, optionId, optionValueId])
}

model Image {
  id            String         @id @default(cuid())
  name          String
  src           String
  alt           String?
  meta          String?
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  Brands        Brand[]
  ProductImages ProductImage[]
}

model ProductImage {
  id        String      @id @default(cuid())
  productId String
  imageId   String
  position  Int         @default(0)
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image     Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variant   Variant[]
  OrderItem OrderItem[]
}

model Settings {
  id        String   @unique
  data      Json     @default("[]") @db.JsonB
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model BrandSettings {
  id        String            @id @default(cuid())
  type      BrandSettingsType
  data      Json              @default("{}") @db.JsonB
  brandId   String
  updatedAt DateTime          @updatedAt
  createdAt DateTime          @default(now())
  Brand     Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, brandId])
  @@unique([id, type, brandId])
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Orders    Order[]
}

model Order {
  id              String          @id @default(cuid())
  name            String
  customerId      String
  brandId         String
  note            String?
  status          OrderStatus     @default(pending)
  deliveryStatus  DeliveryStatus  @default(pending)
  financialStatus FinancialStatus @default(unpaid)
  updatedAt       DateTime        @updatedAt
  createdAt       DateTime        @default(now())
  Customer        Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Brand           Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderShippings  OrderShipping[]
  OrderItems      OrderItem[]
}

model OrderItem {
  id           String        @id @default(cuid())
  orderId      String
  productId    String?
  variantId    String?
  imageId      String?
  title        String
  variantTitle String
  description  String?
  quantity     Int
  price        Decimal       @default(0) @db.Decimal(10, 2)
  finalPrice   Decimal       @default(0) @db.Decimal(10, 2)
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  Order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Product      Product?      @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Variant      Variant?      @relation(fields: [variantId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Image        ProductImage? @relation(fields: [imageId], references: [id], onDelete: SetNull, onUpdate: SetNull)
}

model OrderShipping {
  id        String   @id @default(cuid())
  orderId   String
  name      String
  phone     String
  note      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
