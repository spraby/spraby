datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

enum order_status {
  pending
  confirmed
  processing
  completed
  cancelled
  archived
}

enum delivery_status {
  pending
  packing
  shipped
  transit
  delivered
}

enum financial_status {
  unpaid
  paid
  partial_paid
  refunded
}

model users {
  id         BigInt   @id @default(autoincrement())
  first_name String?
  last_name  String?
  email      String   @unique
  password   String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Brands     brands[]
}

model brands {
  id          BigInt           @id @default(autoincrement())
  user_id     BigInt?
  name        String
  description String?
  updated_at  DateTime         @updatedAt
  created_at  DateTime         @default(now())
  User        users?           @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Products    products[]
  Categories  categories[]
  Images      images[]
  Settings    brand_settings[]
  orders      orders[]
}

model options {
  id            BigInt            @id @default(autoincrement())
  name          String
  title         String
  description   String?
  updated_at    DateTime          @updatedAt
  created_at    DateTime          @default(now())
  Values        option_values[]
  Categories    category_option[]
  VariantValues variant_values[]
}

model option_values {
  id            BigInt           @id @default(autoincrement())
  option_id     BigInt
  value         String
  updated_at    DateTime         @updatedAt
  created_at    DateTime         @default(now())
  Option        options          @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  VariantValues variant_values[]
}

model category_collection {
  category_id   BigInt
  collection_id BigInt

  Category   categories  @relation(fields: [category_id], references: [id])
  Collection collections @relation(fields: [collection_id], references: [id])

  @@id([category_id, collection_id])
}

model category_option {
  category_id BigInt
  option_id   BigInt
  Category    categories @relation(fields: [category_id], references: [id])
  Option      options    @relation(fields: [option_id], references: [id])

  @@id([category_id, option_id])
}

model categories {
  id                 BigInt                @id @default(autoincrement())
  handle             String                @unique
  name               String
  title              String
  description        String?
  meta_title         String?
  meta_description   String?
  meta_keywords      String?
  updated_at         DateTime              @updatedAt
  created_at         DateTime              @default(now())
  CategoryOption     category_option[]
  Brands             brands[]
  Products           products[]
  CategoryCollection category_collection[]
}

model collections {
  id                 BigInt                @id @default(autoincrement())
  handle             String                @unique
  name               String
  title              String
  description        String?
  meta_title         String?
  meta_description   String?
  meta_keywords      String?
  updated_at         DateTime              @updatedAt
  created_at         DateTime              @default(now())
  CategoryCollection category_collection[]
}

model products {
  id          BigInt              @id @default(autoincrement())
  brand_id    BigInt
  category_id BigInt?
  title       String
  description String?
  enabled     Boolean             @default(true)
  price       Decimal             @default(0) @db.Decimal(10, 2)
  final_price Decimal             @default(0) @db.Decimal(10, 2)
  updated_at  DateTime            @updatedAt
  created_at  DateTime            @default(now())
  Brand       brands              @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category    categories?         @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Variants    variants[]
  Images      product_images[]
  OrderItems  order_items[]
  Statistics  ProductStatistics[]
}

model variants {
  id           BigInt           @id @default(autoincrement())
  product_id   BigInt
  image_id     BigInt?
  title        String?
  price        Decimal          @default(0) @db.Decimal(10, 2)
  final_price  Decimal          @default(0) @db.Decimal(10, 2)
  updated_at   DateTime         @updatedAt
  created_at   DateTime         @default(now())
  Product      products         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image        product_images?  @relation(fields: [image_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  VariantValue variant_values[]
  order_items  order_items[]
}

model variant_values {
  id              BigInt        @id @default(autoincrement())
  variant_id      BigInt
  option_id       BigInt
  option_value_id BigInt
  updated_at      DateTime      @updatedAt
  created_at      DateTime      @default(now())
  Variant         variants      @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Option          options       @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value           option_values @relation(fields: [option_value_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variant_id, option_id])
  @@unique([variant_id, option_id, option_value_id])
}

model images {
  id            BigInt           @id @default(autoincrement())
  name          String
  src           String
  alt           String?
  meta          String?
  updated_at    DateTime         @updatedAt
  created_at    DateTime         @default(now())
  Brands        brands[]
  ProductImages product_images[]
}

model product_images {
  id          BigInt        @id @default(autoincrement())
  product_id  BigInt
  image_id    BigInt
  position    Int           @default(0)
  updated_at  DateTime      @updatedAt
  created_at  DateTime      @default(now())
  Product     products      @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image       images        @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variant     variants[]
  order_items order_items[]
}

model settings {
  id         BigInt   @id @default(autoincrement())
  key        String   @unique
  data       Json     @default("[]") @db.JsonB
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

model brand_settings {
  id         BigInt   @id @default(autoincrement())
  type       String
  data       Json     @default("{}") @db.JsonB
  brand_id   BigInt
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Brand      brands   @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, brand_id])
}

model customers {
  id         BigInt   @id @default(autoincrement())
  email      String   @unique
  name       String
  phone      String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Orders     orders[]
}

model orders {
  id               BigInt            @id @default(autoincrement())
  name             String
  customer_id      BigInt
  brand_id         BigInt
  note             String?
  status           order_status      @default(pending)
  delivery_status  delivery_status   @default(pending)
  financial_status financial_status  @default(unpaid)
  updated_at       DateTime          @updatedAt
  created_at       DateTime          @default(now())
  Customer         customers         @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Brand            brands            @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderShippings   order_shippings[]
  OrderItems       order_items[]
}

model order_items {
  id            BigInt          @id @default(autoincrement())
  order_id      BigInt
  product_id    BigInt?
  variant_id    BigInt?
  image_id      BigInt?
  title         String
  variant_title String
  description   String?
  quantity      Int
  price         Decimal         @default(0) @db.Decimal(10, 2)
  final_price   Decimal         @default(0) @db.Decimal(10, 2)
  updated_at    DateTime        @updatedAt
  created_at    DateTime        @default(now())
  Order         orders          @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Product       products?       @relation(fields: [product_id], references: [id], onDelete: SetNull)
  Variant       variants?       @relation(fields: [variant_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Image         product_images? @relation(fields: [image_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
}

model order_shippings {
  id         BigInt   @id @default(autoincrement())
  order_id   BigInt
  name       String
  phone      String
  note       String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Order      orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductStatistics {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  product_id BigInt   @db.BigInt
  client_id  String
  type       String
  geo        Json?    @db.JsonB
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  Product products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([product_id, client_id, type], name: "statistics")
  @@map("product_statistics")
}
