datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id         BigInt   @id @default(autoincrement())
  first_name String?
  last_name  String?
  email      String   @unique
  password   String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Brands     brands[]
}

model brands {
  id          BigInt           @id @default(autoincrement())
  user_id     BigInt?
  name        String
  description String?
  updated_at  DateTime         @updatedAt
  created_at  DateTime         @default(now())
  User        users?           @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Products    products[]
  Categories  categories[]
  Images      images[]
  Settings    brand_settings[]
}

model options {
  id            BigInt            @id @default(autoincrement())
  name          String
  title         String
  description   String?
  updated_at    DateTime          @updatedAt
  created_at    DateTime          @default(now())
  Values        option_values[]
  Categories    category_option[]
  VariantValues variant_values[]
}

model option_values {
  id            BigInt           @id @default(autoincrement())
  option_id     BigInt
  value         String
  updated_at    DateTime         @updatedAt
  created_at    DateTime         @default(now())
  Option        options          @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  VariantValues variant_values[]
}

model category_collection {
  category_id   BigInt
  collection_id BigInt

  category   categories  @relation(fields: [category_id], references: [id])
  collection collections @relation(fields: [collection_id], references: [id])

  @@id([category_id, collection_id])
}

model category_option {
  category_id BigInt
  option_id   BigInt
  category    categories @relation(fields: [category_id], references: [id])
  option      options    @relation(fields: [option_id], references: [id])

  @@id([category_id, option_id])
}

model categories {
  id          BigInt                @id @default(autoincrement())
  handle      String                @unique
  name        String
  title       String
  description String?
  updated_at  DateTime              @updatedAt
  created_at  DateTime              @default(now())
  Options     category_option[]
  Brands      brands[]
  Products    products[]
  Collections category_collection[]
}

model collections {
  id          BigInt                @id @default(autoincrement())
  handle      String                @unique
  name        String
  title       String
  description String?
  updated_at  DateTime              @updatedAt
  created_at  DateTime              @default(now())
  Categories  category_collection[]
}

model products {
  id          BigInt           @id @default(autoincrement())
  brand_id    BigInt
  category_id BigInt?
  title       String
  description String?
  enabled     Boolean          @default(true)
  price       Decimal          @default(0) @db.Decimal(10, 2)
  final_price Decimal          @default(0) @db.Decimal(10, 2)
  updated_at  DateTime         @updatedAt
  created_at  DateTime         @default(now())
  Brand       brands           @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category    categories?      @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Variants    variants[]
  Images      product_images[]
}

model variants {
  id          BigInt           @id @default(autoincrement())
  product_id  BigInt
  image_id    BigInt?
  title       String?
  price       Decimal          @default(0) @db.Decimal(10, 2)
  final_price Decimal          @default(0) @db.Decimal(10, 2)
  updated_at  DateTime         @updatedAt
  created_at  DateTime         @default(now())
  Product     products         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image       product_images?  @relation(fields: [image_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  Values      variant_values[]
}

model variant_values {
  id              BigInt        @id @default(autoincrement())
  variant_id      BigInt
  option_id       BigInt
  option_value_id BigInt
  updated_at      DateTime      @updatedAt
  created_at      DateTime      @default(now())
  Variant         variants      @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Option          options       @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value           option_values @relation(fields: [option_value_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([variant_id, option_id])
  @@unique([variant_id, option_id, option_value_id])
}

model images {
  id            BigInt           @id @default(autoincrement())
  name          String
  src           String
  alt           String?
  meta          String?
  updated_at    DateTime         @updatedAt
  created_at    DateTime         @default(now())
  Brands        brands[]
  ProductImages product_images[]
}

model product_images {
  id         BigInt     @id @default(autoincrement())
  product_id BigInt
  image_id   BigInt
  position   Int        @default(0)
  updated_at DateTime   @updatedAt
  created_at DateTime   @default(now())
  Product    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image      images     @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variant    variants[]
}

model settings {
  id         BigInt   @id @default(autoincrement())
  key        String   @unique
  data       Json     @default("[]") @db.JsonB
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

model brand_settings {
  id         BigInt   @id @default(autoincrement())
  type       String
  data       Json     @default("{}") @db.JsonB
  brand_id   BigInt
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Brand      brands   @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, brand_id])
}
